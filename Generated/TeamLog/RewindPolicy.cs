// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.TeamLog
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>Policy for controlling whether team members can rewind</para>
    /// </summary>
    public class RewindPolicy
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<RewindPolicy> Encoder = new RewindPolicyEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<RewindPolicy> Decoder = new RewindPolicyDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="RewindPolicy" /> class.</para>
        /// </summary>
        public RewindPolicy()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is AdminsOnly</para>
        /// </summary>
        public bool IsAdminsOnly
        {
            get
            {
                return this is AdminsOnly;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a AdminsOnly, or <c>null</c>.</para>
        /// </summary>
        public AdminsOnly AsAdminsOnly
        {
            get
            {
                return this as AdminsOnly;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Everyone</para>
        /// </summary>
        public bool IsEveryone
        {
            get
            {
                return this is Everyone;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Everyone, or <c>null</c>.</para>
        /// </summary>
        public Everyone AsEveryone
        {
            get
            {
                return this as Everyone;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="RewindPolicy" />.</para>
        /// </summary>
        private class RewindPolicyEncoder : enc.StructEncoder<RewindPolicy>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(RewindPolicy value, enc.IJsonWriter writer)
            {
                if (value is AdminsOnly)
                {
                    WriteProperty(".tag", "admins_only", writer, enc.StringEncoder.Instance);
                    AdminsOnly.Encoder.EncodeFields((AdminsOnly)value, writer);
                    return;
                }
                if (value is Everyone)
                {
                    WriteProperty(".tag", "everyone", writer, enc.StringEncoder.Instance);
                    Everyone.Encoder.EncodeFields((Everyone)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="RewindPolicy" />.</para>
        /// </summary>
        private class RewindPolicyDecoder : enc.UnionDecoder<RewindPolicy>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="RewindPolicy" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override RewindPolicy Create()
            {
                return new RewindPolicy();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override RewindPolicy Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "admins_only":
                        return AdminsOnly.Decoder.DecodeFields(reader);
                    case "everyone":
                        return Everyone.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The admins only object</para>
        /// </summary>
        public sealed class AdminsOnly : RewindPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<AdminsOnly> Encoder = new AdminsOnlyEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<AdminsOnly> Decoder = new AdminsOnlyDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="AdminsOnly" /> class.</para>
            /// </summary>
            private AdminsOnly()
            {
            }

            /// <summary>
            /// <para>A singleton instance of AdminsOnly</para>
            /// </summary>
            public static readonly AdminsOnly Instance = new AdminsOnly();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="AdminsOnly" />.</para>
            /// </summary>
            private class AdminsOnlyEncoder : enc.StructEncoder<AdminsOnly>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(AdminsOnly value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="AdminsOnly" />.</para>
            /// </summary>
            private class AdminsOnlyDecoder : enc.StructDecoder<AdminsOnly>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="AdminsOnly" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override AdminsOnly Create()
                {
                    return AdminsOnly.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The everyone object</para>
        /// </summary>
        public sealed class Everyone : RewindPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Everyone> Encoder = new EveryoneEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Everyone> Decoder = new EveryoneDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Everyone" /> class.</para>
            /// </summary>
            private Everyone()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Everyone</para>
            /// </summary>
            public static readonly Everyone Instance = new Everyone();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Everyone" />.</para>
            /// </summary>
            private class EveryoneEncoder : enc.StructEncoder<Everyone>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Everyone value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Everyone" />.</para>
            /// </summary>
            private class EveryoneDecoder : enc.StructDecoder<Everyone>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Everyone" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Everyone Create()
                {
                    return Everyone.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : RewindPolicy
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
