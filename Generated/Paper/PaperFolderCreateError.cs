// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Paper
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The paper folder create error object</para>
    /// </summary>
    public class PaperFolderCreateError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<PaperFolderCreateError> Encoder = new PaperFolderCreateErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<PaperFolderCreateError> Decoder = new PaperFolderCreateErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="PaperFolderCreateError" />
        /// class.</para>
        /// </summary>
        public PaperFolderCreateError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FolderNotFound</para>
        /// </summary>
        public bool IsFolderNotFound
        {
            get
            {
                return this is FolderNotFound;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FolderNotFound, or <c>null</c>.</para>
        /// </summary>
        public FolderNotFound AsFolderNotFound
        {
            get
            {
                return this as FolderNotFound;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InvalidFolderId</para>
        /// </summary>
        public bool IsInvalidFolderId
        {
            get
            {
                return this is InvalidFolderId;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InvalidFolderId, or <c>null</c>.</para>
        /// </summary>
        public InvalidFolderId AsInvalidFolderId
        {
            get
            {
                return this as InvalidFolderId;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// InsufficientPermissions</para>
        /// </summary>
        public bool IsInsufficientPermissions
        {
            get
            {
                return this is InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InsufficientPermissions, or <c>null</c>.</para>
        /// </summary>
        public InsufficientPermissions AsInsufficientPermissions
        {
            get
            {
                return this as InsufficientPermissions;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="PaperFolderCreateError" />.</para>
        /// </summary>
        private class PaperFolderCreateErrorEncoder : enc.StructEncoder<PaperFolderCreateError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(PaperFolderCreateError value, enc.IJsonWriter writer)
            {
                if (value is FolderNotFound)
                {
                    WriteProperty(".tag", "folder_not_found", writer, enc.StringEncoder.Instance);
                    FolderNotFound.Encoder.EncodeFields((FolderNotFound)value, writer);
                    return;
                }
                if (value is InvalidFolderId)
                {
                    WriteProperty(".tag", "invalid_folder_id", writer, enc.StringEncoder.Instance);
                    InvalidFolderId.Encoder.EncodeFields((InvalidFolderId)value, writer);
                    return;
                }
                if (value is InsufficientPermissions)
                {
                    WriteProperty(".tag", "insufficient_permissions", writer, enc.StringEncoder.Instance);
                    InsufficientPermissions.Encoder.EncodeFields((InsufficientPermissions)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="PaperFolderCreateError" />.</para>
        /// </summary>
        private class PaperFolderCreateErrorDecoder : enc.UnionDecoder<PaperFolderCreateError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="PaperFolderCreateError"
            /// />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override PaperFolderCreateError Create()
            {
                return new PaperFolderCreateError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override PaperFolderCreateError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "folder_not_found":
                        return FolderNotFound.Decoder.DecodeFields(reader);
                    case "invalid_folder_id":
                        return InvalidFolderId.Decoder.DecodeFields(reader);
                    case "insufficient_permissions":
                        return InsufficientPermissions.Decoder.DecodeFields(reader);
                    case "other":
                        return Other.Decoder.DecodeFields(reader);
                    default:
                        throw new sys.InvalidOperationException();
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The specified parent Paper folder cannot be found.</para>
        /// </summary>
        public sealed class FolderNotFound : PaperFolderCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FolderNotFound> Encoder = new FolderNotFoundEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FolderNotFound> Decoder = new FolderNotFoundDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FolderNotFound" />
            /// class.</para>
            /// </summary>
            private FolderNotFound()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FolderNotFound</para>
            /// </summary>
            public static readonly FolderNotFound Instance = new FolderNotFound();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FolderNotFound" />.</para>
            /// </summary>
            private class FolderNotFoundEncoder : enc.StructEncoder<FolderNotFound>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FolderNotFound value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FolderNotFound" />.</para>
            /// </summary>
            private class FolderNotFoundDecoder : enc.StructDecoder<FolderNotFound>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FolderNotFound" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FolderNotFound Create()
                {
                    return FolderNotFound.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The folder id cannot be decrypted to valid folder id.</para>
        /// </summary>
        public sealed class InvalidFolderId : PaperFolderCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InvalidFolderId> Encoder = new InvalidFolderIdEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InvalidFolderId> Decoder = new InvalidFolderIdDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InvalidFolderId" />
            /// class.</para>
            /// </summary>
            private InvalidFolderId()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InvalidFolderId</para>
            /// </summary>
            public static readonly InvalidFolderId Instance = new InvalidFolderId();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InvalidFolderId" />.</para>
            /// </summary>
            private class InvalidFolderIdEncoder : enc.StructEncoder<InvalidFolderId>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InvalidFolderId value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InvalidFolderId" />.</para>
            /// </summary>
            private class InvalidFolderIdDecoder : enc.StructDecoder<InvalidFolderId>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InvalidFolderId" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InvalidFolderId Create()
                {
                    return InvalidFolderId.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Your account does not have permissions to perform this action. This may be
        /// due to it only having access to Paper as files in the Dropbox filesystem. For more
        /// information, refer to the <a
        /// href="https://www.dropbox.com/lp/developers/reference/paper-migration-guide">Paper
        /// Migration Guide</a>.</para>
        /// </summary>
        public sealed class InsufficientPermissions : PaperFolderCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InsufficientPermissions> Encoder = new InsufficientPermissionsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InsufficientPermissions> Decoder = new InsufficientPermissionsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InsufficientPermissions" />
            /// class.</para>
            /// </summary>
            private InsufficientPermissions()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InsufficientPermissions</para>
            /// </summary>
            public static readonly InsufficientPermissions Instance = new InsufficientPermissions();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsEncoder : enc.StructEncoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InsufficientPermissions value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InsufficientPermissions" />.</para>
            /// </summary>
            private class InsufficientPermissionsDecoder : enc.StructDecoder<InsufficientPermissions>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InsufficientPermissions"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InsufficientPermissions Create()
                {
                    return InsufficientPermissions.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : PaperFolderCreateError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
