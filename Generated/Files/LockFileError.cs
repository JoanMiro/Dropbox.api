// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The lock file error object</para>
    /// </summary>
    public class LockFileError
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LockFileError> Encoder = new LockFileErrorEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LockFileError> Decoder = new LockFileErrorDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LockFileError" /> class.</para>
        /// </summary>
        public LockFileError()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is PathLookup</para>
        /// </summary>
        public bool IsPathLookup
        {
            get
            {
                return this is PathLookup;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a PathLookup, or <c>null</c>.</para>
        /// </summary>
        public PathLookup AsPathLookup
        {
            get
            {
                return this as PathLookup;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is
        /// TooManyWriteOperations</para>
        /// </summary>
        public bool IsTooManyWriteOperations
        {
            get
            {
                return this is TooManyWriteOperations;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyWriteOperations, or <c>null</c>.</para>
        /// </summary>
        public TooManyWriteOperations AsTooManyWriteOperations
        {
            get
            {
                return this as TooManyWriteOperations;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is TooManyFiles</para>
        /// </summary>
        public bool IsTooManyFiles
        {
            get
            {
                return this is TooManyFiles;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a TooManyFiles, or <c>null</c>.</para>
        /// </summary>
        public TooManyFiles AsTooManyFiles
        {
            get
            {
                return this as TooManyFiles;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is NoWritePermission</para>
        /// </summary>
        public bool IsNoWritePermission
        {
            get
            {
                return this is NoWritePermission;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a NoWritePermission, or <c>null</c>.</para>
        /// </summary>
        public NoWritePermission AsNoWritePermission
        {
            get
            {
                return this as NoWritePermission;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is CannotBeLocked</para>
        /// </summary>
        public bool IsCannotBeLocked
        {
            get
            {
                return this is CannotBeLocked;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a CannotBeLocked, or <c>null</c>.</para>
        /// </summary>
        public CannotBeLocked AsCannotBeLocked
        {
            get
            {
                return this as CannotBeLocked;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is FileNotShared</para>
        /// </summary>
        public bool IsFileNotShared
        {
            get
            {
                return this is FileNotShared;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a FileNotShared, or <c>null</c>.</para>
        /// </summary>
        public FileNotShared AsFileNotShared
        {
            get
            {
                return this as FileNotShared;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is LockConflict</para>
        /// </summary>
        public bool IsLockConflict
        {
            get
            {
                return this is LockConflict;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a LockConflict, or <c>null</c>.</para>
        /// </summary>
        public LockConflict AsLockConflict
        {
            get
            {
                return this as LockConflict;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is InternalError</para>
        /// </summary>
        public bool IsInternalError
        {
            get
            {
                return this is InternalError;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a InternalError, or <c>null</c>.</para>
        /// </summary>
        public InternalError AsInternalError
        {
            get
            {
                return this as InternalError;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LockFileError" />.</para>
        /// </summary>
        private class LockFileErrorEncoder : enc.StructEncoder<LockFileError>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LockFileError value, enc.IJsonWriter writer)
            {
                if (value is PathLookup)
                {
                    WriteProperty(".tag", "path_lookup", writer, enc.StringEncoder.Instance);
                    PathLookup.Encoder.EncodeFields((PathLookup)value, writer);
                    return;
                }
                if (value is TooManyWriteOperations)
                {
                    WriteProperty(".tag", "too_many_write_operations", writer, enc.StringEncoder.Instance);
                    TooManyWriteOperations.Encoder.EncodeFields((TooManyWriteOperations)value, writer);
                    return;
                }
                if (value is TooManyFiles)
                {
                    WriteProperty(".tag", "too_many_files", writer, enc.StringEncoder.Instance);
                    TooManyFiles.Encoder.EncodeFields((TooManyFiles)value, writer);
                    return;
                }
                if (value is NoWritePermission)
                {
                    WriteProperty(".tag", "no_write_permission", writer, enc.StringEncoder.Instance);
                    NoWritePermission.Encoder.EncodeFields((NoWritePermission)value, writer);
                    return;
                }
                if (value is CannotBeLocked)
                {
                    WriteProperty(".tag", "cannot_be_locked", writer, enc.StringEncoder.Instance);
                    CannotBeLocked.Encoder.EncodeFields((CannotBeLocked)value, writer);
                    return;
                }
                if (value is FileNotShared)
                {
                    WriteProperty(".tag", "file_not_shared", writer, enc.StringEncoder.Instance);
                    FileNotShared.Encoder.EncodeFields((FileNotShared)value, writer);
                    return;
                }
                if (value is LockConflict)
                {
                    WriteProperty(".tag", "lock_conflict", writer, enc.StringEncoder.Instance);
                    LockConflict.Encoder.EncodeFields((LockConflict)value, writer);
                    return;
                }
                if (value is InternalError)
                {
                    WriteProperty(".tag", "internal_error", writer, enc.StringEncoder.Instance);
                    InternalError.Encoder.EncodeFields((InternalError)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LockFileError" />.</para>
        /// </summary>
        private class LockFileErrorDecoder : enc.UnionDecoder<LockFileError>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LockFileError" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LockFileError Create()
            {
                return new LockFileError();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override LockFileError Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "path_lookup":
                        return PathLookup.Decoder.DecodeFields(reader);
                    case "too_many_write_operations":
                        return TooManyWriteOperations.Decoder.DecodeFields(reader);
                    case "too_many_files":
                        return TooManyFiles.Decoder.DecodeFields(reader);
                    case "no_write_permission":
                        return NoWritePermission.Decoder.DecodeFields(reader);
                    case "cannot_be_locked":
                        return CannotBeLocked.Decoder.DecodeFields(reader);
                    case "file_not_shared":
                        return FileNotShared.Decoder.DecodeFields(reader);
                    case "lock_conflict":
                        return LockConflict.Decoder.DecodeFields(reader);
                    case "internal_error":
                        return InternalError.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>Could not find the specified resource.</para>
        /// </summary>
        public sealed class PathLookup : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<PathLookup> Encoder = new PathLookupEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<PathLookup> Decoder = new PathLookupDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PathLookup" /> class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public PathLookup(LookupError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="PathLookup" /> class.</para>
            /// </summary>
            private PathLookup()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public LookupError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="PathLookup" />.</para>
            /// </summary>
            private class PathLookupEncoder : enc.StructEncoder<PathLookup>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(PathLookup value, enc.IJsonWriter writer)
                {
                    WriteProperty("path_lookup", value.Value, writer, global::Dropbox.Api.Files.LookupError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="PathLookup" />.</para>
            /// </summary>
            private class PathLookupDecoder : enc.StructDecoder<PathLookup>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="PathLookup" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override PathLookup Create()
                {
                    return new PathLookup();
                }

                /// <summary>
                /// <para>Set given field.</para>
                /// </summary>
                /// <param name="value">The field value.</param>
                /// <param name="fieldName">The field name.</param>
                /// <param name="reader">The json reader.</param>
                protected override void SetField(PathLookup value, string fieldName, enc.IJsonReader reader)
                {
                    switch (fieldName)
                    {
                        case "path_lookup":
                            value.Value = global::Dropbox.Api.Files.LookupError.Decoder.Decode(reader);
                            break;
                        default:
                            reader.Skip();
                            break;
                    }
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>There are too many write operations in user's Dropbox. Please retry this
        /// request.</para>
        /// </summary>
        public sealed class TooManyWriteOperations : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyWriteOperations> Encoder = new TooManyWriteOperationsEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyWriteOperations> Decoder = new TooManyWriteOperationsDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyWriteOperations" />
            /// class.</para>
            /// </summary>
            private TooManyWriteOperations()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyWriteOperations</para>
            /// </summary>
            public static readonly TooManyWriteOperations Instance = new TooManyWriteOperations();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyWriteOperations" />.</para>
            /// </summary>
            private class TooManyWriteOperationsEncoder : enc.StructEncoder<TooManyWriteOperations>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyWriteOperations value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyWriteOperations" />.</para>
            /// </summary>
            private class TooManyWriteOperationsDecoder : enc.StructDecoder<TooManyWriteOperations>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyWriteOperations"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyWriteOperations Create()
                {
                    return TooManyWriteOperations.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>There are too many files in one request. Please retry with fewer
        /// files.</para>
        /// </summary>
        public sealed class TooManyFiles : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<TooManyFiles> Encoder = new TooManyFilesEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<TooManyFiles> Decoder = new TooManyFilesDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="TooManyFiles" />
            /// class.</para>
            /// </summary>
            private TooManyFiles()
            {
            }

            /// <summary>
            /// <para>A singleton instance of TooManyFiles</para>
            /// </summary>
            public static readonly TooManyFiles Instance = new TooManyFiles();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="TooManyFiles" />.</para>
            /// </summary>
            private class TooManyFilesEncoder : enc.StructEncoder<TooManyFiles>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(TooManyFiles value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="TooManyFiles" />.</para>
            /// </summary>
            private class TooManyFilesDecoder : enc.StructDecoder<TooManyFiles>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="TooManyFiles" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override TooManyFiles Create()
                {
                    return TooManyFiles.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user does not have permissions to change the lock state or access the
        /// file.</para>
        /// </summary>
        public sealed class NoWritePermission : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<NoWritePermission> Encoder = new NoWritePermissionEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<NoWritePermission> Decoder = new NoWritePermissionDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="NoWritePermission" />
            /// class.</para>
            /// </summary>
            private NoWritePermission()
            {
            }

            /// <summary>
            /// <para>A singleton instance of NoWritePermission</para>
            /// </summary>
            public static readonly NoWritePermission Instance = new NoWritePermission();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="NoWritePermission" />.</para>
            /// </summary>
            private class NoWritePermissionEncoder : enc.StructEncoder<NoWritePermission>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(NoWritePermission value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="NoWritePermission" />.</para>
            /// </summary>
            private class NoWritePermissionDecoder : enc.StructDecoder<NoWritePermission>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="NoWritePermission"
                /// />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override NoWritePermission Create()
                {
                    return NoWritePermission.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Item is a type that cannot be locked.</para>
        /// </summary>
        public sealed class CannotBeLocked : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<CannotBeLocked> Encoder = new CannotBeLockedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<CannotBeLocked> Decoder = new CannotBeLockedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="CannotBeLocked" />
            /// class.</para>
            /// </summary>
            private CannotBeLocked()
            {
            }

            /// <summary>
            /// <para>A singleton instance of CannotBeLocked</para>
            /// </summary>
            public static readonly CannotBeLocked Instance = new CannotBeLocked();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="CannotBeLocked" />.</para>
            /// </summary>
            private class CannotBeLockedEncoder : enc.StructEncoder<CannotBeLocked>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(CannotBeLocked value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="CannotBeLocked" />.</para>
            /// </summary>
            private class CannotBeLockedDecoder : enc.StructDecoder<CannotBeLocked>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="CannotBeLocked" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override CannotBeLocked Create()
                {
                    return CannotBeLocked.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>Requested file is not currently shared.</para>
        /// </summary>
        public sealed class FileNotShared : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<FileNotShared> Encoder = new FileNotSharedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<FileNotShared> Decoder = new FileNotSharedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="FileNotShared" />
            /// class.</para>
            /// </summary>
            private FileNotShared()
            {
            }

            /// <summary>
            /// <para>A singleton instance of FileNotShared</para>
            /// </summary>
            public static readonly FileNotShared Instance = new FileNotShared();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="FileNotShared" />.</para>
            /// </summary>
            private class FileNotSharedEncoder : enc.StructEncoder<FileNotShared>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(FileNotShared value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="FileNotShared" />.</para>
            /// </summary>
            private class FileNotSharedDecoder : enc.StructDecoder<FileNotShared>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="FileNotShared" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override FileNotShared Create()
                {
                    return FileNotShared.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The user action conflicts with an existing lock on the file.</para>
        /// </summary>
        public sealed class LockConflict : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<LockConflict> Encoder = new LockConflictEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<LockConflict> Decoder = new LockConflictDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="LockConflict" />
            /// class.</para>
            /// </summary>
            /// <param name="value">The value</param>
            public LockConflict(LockConflictError value)
            {
                this.Value = value;
            }
            /// <summary>
            /// <para>Initializes a new instance of the <see cref="LockConflict" />
            /// class.</para>
            /// </summary>
            private LockConflict()
            {
            }

            /// <summary>
            /// <para>Gets the value of this instance.</para>
            /// </summary>
            public LockConflictError Value { get; private set; }

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="LockConflict" />.</para>
            /// </summary>
            private class LockConflictEncoder : enc.StructEncoder<LockConflict>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(LockConflict value, enc.IJsonWriter writer)
                {
                    WriteProperty("lock_conflict", value.Value, writer, global::Dropbox.Api.Files.LockConflictError.Encoder);
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="LockConflict" />.</para>
            /// </summary>
            private class LockConflictDecoder : enc.StructDecoder<LockConflict>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="LockConflict" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override LockConflict Create()
                {
                    return new LockConflict();
                }

                /// <summary>
                /// <para>Decode fields without ensuring start and end object.</para>
                /// </summary>
                /// <param name="reader">The json reader.</param>
                /// <returns>The decoded object.</returns>
                public override LockConflict DecodeFields(enc.IJsonReader reader)
                {
                    return new LockConflict(global::Dropbox.Api.Files.LockConflictError.Decoder.DecodeFields(reader));
                }
            }

            #endregion
        }

        /// <summary>
        /// <para>Something went wrong with the job on Dropbox's end. You'll need to verify
        /// that the action you were taking succeeded, and if not, try again. This should
        /// happen very rarely.</para>
        /// </summary>
        public sealed class InternalError : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<InternalError> Encoder = new InternalErrorEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<InternalError> Decoder = new InternalErrorDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="InternalError" />
            /// class.</para>
            /// </summary>
            private InternalError()
            {
            }

            /// <summary>
            /// <para>A singleton instance of InternalError</para>
            /// </summary>
            public static readonly InternalError Instance = new InternalError();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="InternalError" />.</para>
            /// </summary>
            private class InternalErrorEncoder : enc.StructEncoder<InternalError>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(InternalError value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="InternalError" />.</para>
            /// </summary>
            private class InternalErrorDecoder : enc.StructDecoder<InternalError>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="InternalError" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override InternalError Create()
                {
                    return InternalError.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : LockFileError
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
