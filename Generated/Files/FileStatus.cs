// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The file status object</para>
    /// </summary>
    public class FileStatus
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<FileStatus> Encoder = new FileStatusEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<FileStatus> Decoder = new FileStatusDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="FileStatus" /> class.</para>
        /// </summary>
        public FileStatus()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Active</para>
        /// </summary>
        public bool IsActive
        {
            get
            {
                return this is Active;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Active, or <c>null</c>.</para>
        /// </summary>
        public Active AsActive
        {
            get
            {
                return this as Active;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Deleted</para>
        /// </summary>
        public bool IsDeleted
        {
            get
            {
                return this is Deleted;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Deleted, or <c>null</c>.</para>
        /// </summary>
        public Deleted AsDeleted
        {
            get
            {
                return this as Deleted;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="FileStatus" />.</para>
        /// </summary>
        private class FileStatusEncoder : enc.StructEncoder<FileStatus>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(FileStatus value, enc.IJsonWriter writer)
            {
                if (value is Active)
                {
                    WriteProperty(".tag", "active", writer, enc.StringEncoder.Instance);
                    Active.Encoder.EncodeFields((Active)value, writer);
                    return;
                }
                if (value is Deleted)
                {
                    WriteProperty(".tag", "deleted", writer, enc.StringEncoder.Instance);
                    Deleted.Encoder.EncodeFields((Deleted)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="FileStatus" />.</para>
        /// </summary>
        private class FileStatusDecoder : enc.UnionDecoder<FileStatus>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="FileStatus" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override FileStatus Create()
            {
                return new FileStatus();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override FileStatus Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "active":
                        return Active.Decoder.DecodeFields(reader);
                    case "deleted":
                        return Deleted.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The active object</para>
        /// </summary>
        public sealed class Active : FileStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Active> Encoder = new ActiveEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Active> Decoder = new ActiveDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Active" /> class.</para>
            /// </summary>
            private Active()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Active</para>
            /// </summary>
            public static readonly Active Instance = new Active();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Active" />.</para>
            /// </summary>
            private class ActiveEncoder : enc.StructEncoder<Active>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Active value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Active" />.</para>
            /// </summary>
            private class ActiveDecoder : enc.StructDecoder<Active>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Active" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Active Create()
                {
                    return Active.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The deleted object</para>
        /// </summary>
        public sealed class Deleted : FileStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Deleted> Encoder = new DeletedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Deleted> Decoder = new DeletedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Deleted" /> class.</para>
            /// </summary>
            private Deleted()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Deleted</para>
            /// </summary>
            public static readonly Deleted Instance = new Deleted();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Deleted" />.</para>
            /// </summary>
            private class DeletedEncoder : enc.StructEncoder<Deleted>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Deleted value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Deleted" />.</para>
            /// </summary>
            private class DeletedDecoder : enc.StructDecoder<Deleted>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Deleted" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Deleted Create()
                {
                    return Deleted.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : FileStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
