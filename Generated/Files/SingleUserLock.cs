// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Files
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The single user lock object</para>
    /// </summary>
    public class SingleUserLock
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<SingleUserLock> Encoder = new SingleUserLockEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<SingleUserLock> Decoder = new SingleUserLockDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SingleUserLock" /> class.</para>
        /// </summary>
        /// <param name="created">The time the lock was created.</param>
        /// <param name="lockHolderAccountId">The account ID of the lock holder if
        /// known.</param>
        /// <param name="lockHolderTeamId">The id of the team of the account holder if it
        /// exists.</param>
        public SingleUserLock(sys.DateTime created,
                              string lockHolderAccountId,
                              string lockHolderTeamId = null)
        {
            if (lockHolderAccountId == null)
            {
                throw new sys.ArgumentNullException("lockHolderAccountId");
            }
            if (lockHolderAccountId.Length < 40)
            {
                throw new sys.ArgumentOutOfRangeException("lockHolderAccountId", "Length should be at least 40");
            }
            if (lockHolderAccountId.Length > 40)
            {
                throw new sys.ArgumentOutOfRangeException("lockHolderAccountId", "Length should be at most 40");
            }

            this.Created = created;
            this.LockHolderAccountId = lockHolderAccountId;
            this.LockHolderTeamId = lockHolderTeamId;
        }

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="SingleUserLock" /> class.</para>
        /// </summary>
        /// <remarks>This is to construct an instance of the object when
        /// deserializing.</remarks>
        [sys.ComponentModel.EditorBrowsable(sys.ComponentModel.EditorBrowsableState.Never)]
        public SingleUserLock()
        {
        }

        /// <summary>
        /// <para>The time the lock was created.</para>
        /// </summary>
        public sys.DateTime Created { get; protected set; }

        /// <summary>
        /// <para>The account ID of the lock holder if known.</para>
        /// </summary>
        public string LockHolderAccountId { get; protected set; }

        /// <summary>
        /// <para>The id of the team of the account holder if it exists.</para>
        /// </summary>
        public string LockHolderTeamId { get; protected set; }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="SingleUserLock" />.</para>
        /// </summary>
        private class SingleUserLockEncoder : enc.StructEncoder<SingleUserLock>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(SingleUserLock value, enc.IJsonWriter writer)
            {
                WriteProperty("created", value.Created, writer, enc.DateTimeEncoder.Instance);
                WriteProperty("lock_holder_account_id", value.LockHolderAccountId, writer, enc.StringEncoder.Instance);
                if (value.LockHolderTeamId != null)
                {
                    WriteProperty("lock_holder_team_id", value.LockHolderTeamId, writer, enc.StringEncoder.Instance);
                }
            }
        }

        #endregion


        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="SingleUserLock" />.</para>
        /// </summary>
        private class SingleUserLockDecoder : enc.StructDecoder<SingleUserLock>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="SingleUserLock" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override SingleUserLock Create()
            {
                return new SingleUserLock();
            }

            /// <summary>
            /// <para>Set given field.</para>
            /// </summary>
            /// <param name="value">The field value.</param>
            /// <param name="fieldName">The field name.</param>
            /// <param name="reader">The json reader.</param>
            protected override void SetField(SingleUserLock value, string fieldName, enc.IJsonReader reader)
            {
                switch (fieldName)
                {
                    case "created":
                        value.Created = enc.DateTimeDecoder.Instance.Decode(reader);
                        break;
                    case "lock_holder_account_id":
                        value.LockHolderAccountId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    case "lock_holder_team_id":
                        value.LockHolderTeamId = enc.StringDecoder.Instance.Decode(reader);
                        break;
                    default:
                        reader.Skip();
                        break;
                }
            }
        }

        #endregion
    }
}
