// <auto-generated>
// Auto-generated by StoneAPI, do not modify.
// </auto-generated>

namespace Dropbox.Api.Team
{
    using sys = System;
    using col = System.Collections.Generic;
    using re = System.Text.RegularExpressions;

    using enc = Dropbox.Api.Stone;

    /// <summary>
    /// <para>The legal hold status object</para>
    /// </summary>
    public class LegalHoldStatus
    {
        #pragma warning disable 108

        /// <summary>
        /// <para>The encoder instance.</para>
        /// </summary>
        internal static enc.StructEncoder<LegalHoldStatus> Encoder = new LegalHoldStatusEncoder();

        /// <summary>
        /// <para>The decoder instance.</para>
        /// </summary>
        internal static enc.StructDecoder<LegalHoldStatus> Decoder = new LegalHoldStatusDecoder();

        /// <summary>
        /// <para>Initializes a new instance of the <see cref="LegalHoldStatus" />
        /// class.</para>
        /// </summary>
        public LegalHoldStatus()
        {
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Active</para>
        /// </summary>
        public bool IsActive
        {
            get
            {
                return this is Active;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Active, or <c>null</c>.</para>
        /// </summary>
        public Active AsActive
        {
            get
            {
                return this as Active;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Released</para>
        /// </summary>
        public bool IsReleased
        {
            get
            {
                return this is Released;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Released, or <c>null</c>.</para>
        /// </summary>
        public Released AsReleased
        {
            get
            {
                return this as Released;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Activating</para>
        /// </summary>
        public bool IsActivating
        {
            get
            {
                return this is Activating;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Activating, or <c>null</c>.</para>
        /// </summary>
        public Activating AsActivating
        {
            get
            {
                return this as Activating;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Updating</para>
        /// </summary>
        public bool IsUpdating
        {
            get
            {
                return this is Updating;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Updating, or <c>null</c>.</para>
        /// </summary>
        public Updating AsUpdating
        {
            get
            {
                return this as Updating;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Exporting</para>
        /// </summary>
        public bool IsExporting
        {
            get
            {
                return this is Exporting;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Exporting, or <c>null</c>.</para>
        /// </summary>
        public Exporting AsExporting
        {
            get
            {
                return this as Exporting;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Releasing</para>
        /// </summary>
        public bool IsReleasing
        {
            get
            {
                return this is Releasing;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Releasing, or <c>null</c>.</para>
        /// </summary>
        public Releasing AsReleasing
        {
            get
            {
                return this as Releasing;
            }
        }

        /// <summary>
        /// <para>Gets a value indicating whether this instance is Other</para>
        /// </summary>
        public bool IsOther
        {
            get
            {
                return this is Other;
            }
        }

        /// <summary>
        /// <para>Gets this instance as a Other, or <c>null</c>.</para>
        /// </summary>
        public Other AsOther
        {
            get
            {
                return this as Other;
            }
        }

        #region Encoder class

        /// <summary>
        /// <para>Encoder for  <see cref="LegalHoldStatus" />.</para>
        /// </summary>
        private class LegalHoldStatusEncoder : enc.StructEncoder<LegalHoldStatus>
        {
            /// <summary>
            /// <para>Encode fields of given value.</para>
            /// </summary>
            /// <param name="value">The value.</param>
            /// <param name="writer">The writer.</param>
            public override void EncodeFields(LegalHoldStatus value, enc.IJsonWriter writer)
            {
                if (value is Active)
                {
                    WriteProperty(".tag", "active", writer, enc.StringEncoder.Instance);
                    Active.Encoder.EncodeFields((Active)value, writer);
                    return;
                }
                if (value is Released)
                {
                    WriteProperty(".tag", "released", writer, enc.StringEncoder.Instance);
                    Released.Encoder.EncodeFields((Released)value, writer);
                    return;
                }
                if (value is Activating)
                {
                    WriteProperty(".tag", "activating", writer, enc.StringEncoder.Instance);
                    Activating.Encoder.EncodeFields((Activating)value, writer);
                    return;
                }
                if (value is Updating)
                {
                    WriteProperty(".tag", "updating", writer, enc.StringEncoder.Instance);
                    Updating.Encoder.EncodeFields((Updating)value, writer);
                    return;
                }
                if (value is Exporting)
                {
                    WriteProperty(".tag", "exporting", writer, enc.StringEncoder.Instance);
                    Exporting.Encoder.EncodeFields((Exporting)value, writer);
                    return;
                }
                if (value is Releasing)
                {
                    WriteProperty(".tag", "releasing", writer, enc.StringEncoder.Instance);
                    Releasing.Encoder.EncodeFields((Releasing)value, writer);
                    return;
                }
                if (value is Other)
                {
                    WriteProperty(".tag", "other", writer, enc.StringEncoder.Instance);
                    Other.Encoder.EncodeFields((Other)value, writer);
                    return;
                }
                throw new sys.InvalidOperationException();
            }
        }

        #endregion

        #region Decoder class

        /// <summary>
        /// <para>Decoder for  <see cref="LegalHoldStatus" />.</para>
        /// </summary>
        private class LegalHoldStatusDecoder : enc.UnionDecoder<LegalHoldStatus>
        {
            /// <summary>
            /// <para>Create a new instance of type <see cref="LegalHoldStatus" />.</para>
            /// </summary>
            /// <returns>The struct instance.</returns>
            protected override LegalHoldStatus Create()
            {
                return new LegalHoldStatus();
            }

            /// <summary>
            /// <para>Decode based on given tag.</para>
            /// </summary>
            /// <param name="tag">The tag.</param>
            /// <param name="reader">The json reader.</param>
            /// <returns>The decoded object.</returns>
            protected override LegalHoldStatus Decode(string tag, enc.IJsonReader reader)
            {
                switch (tag)
                {
                    case "active":
                        return Active.Decoder.DecodeFields(reader);
                    case "released":
                        return Released.Decoder.DecodeFields(reader);
                    case "activating":
                        return Activating.Decoder.DecodeFields(reader);
                    case "updating":
                        return Updating.Decoder.DecodeFields(reader);
                    case "exporting":
                        return Exporting.Decoder.DecodeFields(reader);
                    case "releasing":
                        return Releasing.Decoder.DecodeFields(reader);
                    default:
                        return Other.Decoder.DecodeFields(reader);
                }
            }
        }

        #endregion

        /// <summary>
        /// <para>The legal hold policy is active.</para>
        /// </summary>
        public sealed class Active : LegalHoldStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Active> Encoder = new ActiveEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Active> Decoder = new ActiveDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Active" /> class.</para>
            /// </summary>
            private Active()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Active</para>
            /// </summary>
            public static readonly Active Instance = new Active();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Active" />.</para>
            /// </summary>
            private class ActiveEncoder : enc.StructEncoder<Active>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Active value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Active" />.</para>
            /// </summary>
            private class ActiveDecoder : enc.StructDecoder<Active>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Active" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Active Create()
                {
                    return Active.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The legal hold policy was released.</para>
        /// </summary>
        public sealed class Released : LegalHoldStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Released> Encoder = new ReleasedEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Released> Decoder = new ReleasedDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Released" /> class.</para>
            /// </summary>
            private Released()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Released</para>
            /// </summary>
            public static readonly Released Instance = new Released();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Released" />.</para>
            /// </summary>
            private class ReleasedEncoder : enc.StructEncoder<Released>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Released value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Released" />.</para>
            /// </summary>
            private class ReleasedDecoder : enc.StructDecoder<Released>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Released" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Released Create()
                {
                    return Released.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The legal hold policy is activating.</para>
        /// </summary>
        public sealed class Activating : LegalHoldStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Activating> Encoder = new ActivatingEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Activating> Decoder = new ActivatingDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Activating" /> class.</para>
            /// </summary>
            private Activating()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Activating</para>
            /// </summary>
            public static readonly Activating Instance = new Activating();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Activating" />.</para>
            /// </summary>
            private class ActivatingEncoder : enc.StructEncoder<Activating>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Activating value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Activating" />.</para>
            /// </summary>
            private class ActivatingDecoder : enc.StructDecoder<Activating>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Activating" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Activating Create()
                {
                    return Activating.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The legal hold policy is updating.</para>
        /// </summary>
        public sealed class Updating : LegalHoldStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Updating> Encoder = new UpdatingEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Updating> Decoder = new UpdatingDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Updating" /> class.</para>
            /// </summary>
            private Updating()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Updating</para>
            /// </summary>
            public static readonly Updating Instance = new Updating();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Updating" />.</para>
            /// </summary>
            private class UpdatingEncoder : enc.StructEncoder<Updating>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Updating value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Updating" />.</para>
            /// </summary>
            private class UpdatingDecoder : enc.StructDecoder<Updating>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Updating" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Updating Create()
                {
                    return Updating.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The legal hold policy is exporting.</para>
        /// </summary>
        public sealed class Exporting : LegalHoldStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Exporting> Encoder = new ExportingEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Exporting> Decoder = new ExportingDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Exporting" /> class.</para>
            /// </summary>
            private Exporting()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Exporting</para>
            /// </summary>
            public static readonly Exporting Instance = new Exporting();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Exporting" />.</para>
            /// </summary>
            private class ExportingEncoder : enc.StructEncoder<Exporting>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Exporting value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Exporting" />.</para>
            /// </summary>
            private class ExportingDecoder : enc.StructDecoder<Exporting>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Exporting" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Exporting Create()
                {
                    return Exporting.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The legal hold policy is releasing.</para>
        /// </summary>
        public sealed class Releasing : LegalHoldStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Releasing> Encoder = new ReleasingEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Releasing> Decoder = new ReleasingDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Releasing" /> class.</para>
            /// </summary>
            private Releasing()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Releasing</para>
            /// </summary>
            public static readonly Releasing Instance = new Releasing();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Releasing" />.</para>
            /// </summary>
            private class ReleasingEncoder : enc.StructEncoder<Releasing>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Releasing value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Releasing" />.</para>
            /// </summary>
            private class ReleasingDecoder : enc.StructDecoder<Releasing>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Releasing" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Releasing Create()
                {
                    return Releasing.Instance;
                }

            }

            #endregion
        }

        /// <summary>
        /// <para>The other object</para>
        /// </summary>
        public sealed class Other : LegalHoldStatus
        {
            #pragma warning disable 108

            /// <summary>
            /// <para>The encoder instance.</para>
            /// </summary>
            internal static enc.StructEncoder<Other> Encoder = new OtherEncoder();

            /// <summary>
            /// <para>The decoder instance.</para>
            /// </summary>
            internal static enc.StructDecoder<Other> Decoder = new OtherDecoder();

            /// <summary>
            /// <para>Initializes a new instance of the <see cref="Other" /> class.</para>
            /// </summary>
            private Other()
            {
            }

            /// <summary>
            /// <para>A singleton instance of Other</para>
            /// </summary>
            public static readonly Other Instance = new Other();

            #region Encoder class

            /// <summary>
            /// <para>Encoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherEncoder : enc.StructEncoder<Other>
            {
                /// <summary>
                /// <para>Encode fields of given value.</para>
                /// </summary>
                /// <param name="value">The value.</param>
                /// <param name="writer">The writer.</param>
                public override void EncodeFields(Other value, enc.IJsonWriter writer)
                {
                }
            }

            #endregion

            #region Decoder class

            /// <summary>
            /// <para>Decoder for  <see cref="Other" />.</para>
            /// </summary>
            private class OtherDecoder : enc.StructDecoder<Other>
            {
                /// <summary>
                /// <para>Create a new instance of type <see cref="Other" />.</para>
                /// </summary>
                /// <returns>The struct instance.</returns>
                protected override Other Create()
                {
                    return Other.Instance;
                }

            }

            #endregion
        }
    }
}
